# -*- coding: utf-8 -*-
"""rags_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sj31RKa5SDsYQcDAY31HM9_kv152gfgb
"""

!pip install pinecone-client langchain cohere

!pip install openai==0.27.1

from pinecone import pinecone
import os
from dotenv import load_dotenv
from langchain.vectorstores import Pinecone
from langchain.embeddings.cohere import CohereEmbeddings
import openai
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.text_splitter import CharacterTextSplitter
from langchain.document_loaders import DirectoryLoader, TextLoader
from extra import llm_model_cohere, llm_model_openai, PINECONE_INDEX_NAME
load_dotenv()

#inputting the keys
openai_api_key = os.getenv("OPEN_API_KEY")
pinecone_api_key = os.getenv("PINECONE_API_KEY")
cohere_api_key = os.getenv("COHERE_API_KEY")

#loading the data
loader = TextLoader("/content/drive/MyDrive/10academy/rags/rags doc.txt")
document = loader.load()

#VIEWING THE DOCUMENT
doc = "/content/drive/MyDrive/10academy/rags/rags doc.txt"

with open(doc, 'r') as file:
    doc_content = file.read()

print(doc_content)

#setting the chunk size
splitter = CharacterTextSplitter(
    chunk_size = 500,
    chunk_overlap = 100
)

split_docs = splitter.split_documents(document)
print(split_docs)

#creating the embeddings
embeddings = CohereEmbeddings( model = "multilingual-22-12", cohere_api_key= cohere_api_key)

#extracting the page content
texts = [doc.page_content for doc in split_docs]

# Generate embeddings using Cohere
embedded = embeddings.embed(texts)


from pinecone import Pinecone

# initialize connection to pinecone
api_key = os.getenv("PINECONE_API_KEY")

# configure client
pc = Pinecone(api_key=api_key)

#creating an index
import time
from pinecone import ServerlessSpec

index_name = 'rag-cohere1'
existing_indexes = [
    index_info["name"] for index_info in pc.list_indexes()
]

# creating index
if index_name not in existing_indexes:
    # if does not exist, create index
    pc.create_index(
        index_name,
        dimension=1536,  # dimensionality of ada 002
        metric='cosine',
        spec=ServerlessSpec(
        cloud="aws",
        region="us-west-2"
    )

    )
    # wait for index to be initialized
    while not pc.describe_index(index_name).status['ready']:
        time.sleep(1)

# connect to index
index = pc.Index(index_name)
time.sleep(1)
# view index stats
index.describe_index_stats()

#Importing uuid for id generation
from uuid import uuid4
# Upsert documents into the cohere index
ids = [str(uuid4()) for _ in range(len(texts))]
documents = [{'id': id, 'values': vector} for id, vector in zip(ids, embedded)]
index.upsert(documents)